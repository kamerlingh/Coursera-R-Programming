ls()
fit1<-lm(y~x)
fit1
summary(fit1)
fit1<-lm(y~x)
summary(fit1)
fit2 <- lm(y~x+l(x^2))
fit2 <- lm(y~x+1(x^2))
fit2 <- lm(y~x+I(x^2))
fit2
summary(fit2)
fit2 <- lm(y~x+I(x^2))
summary(fit2)
library(tree)
library("tree")
require(tree)
getwd()
ls()
clear()
clearall()
rm(list=ls())
ls()
load(10.R.RData)
load("10.R.RData")
ls()
dim(x)
class(x)
names(x)
ls()
dimnames(x)
ls()
r1 <- rbind(x,x.test)
class(r1)
dim(r1)
r1pca <- prcomp(r1,scale=TRUE)
r1pca
summary(r1pca)
ls()
head(r1pca)
r1pca
summary(r1pca)
ls()
xrt <- as.matrix(x) %*% as.matrix(r1pca$rotation[,1:5])
y.new <- data.frame(y,xrt)
lmfit <- lm(y~.,data=y.new)
testing <- as.matrix(x.test) %*% as.matrix(r1pca$rotation[,1:5])
testing2 <- data.frame(y.test,testing)
outputs <- predict(lmfit, newdata=testing2)
mean((outputs-y.test)^2)
library(pls)
library(p1s)
train <- data.frame(x,y)
pcr_fit <- pcr(y~., data=train,scale=TRUE)
pcr_fit <- prcomp(y~., data=train,scale=TRUE)
yx <- rbind(x,y)
class(yx)
lmfit_train <- lm(y~.,data=yx)
dim(yx)
yx <- data.frame(x,y)
dim(yx)
lmfit_train <- lm(y~.,data=yx)
test <- data.frame(x.test,y.test)
diff <- predict(lmfit_train, newdata=test)
mean((diff-y.test)^2)
library(MASS)
library(e1071)
install("e1071")
install.packages("e1071")
library(e1071)
I10 <- diag(10)
mean1 <- rep(0,10)
mean2 <- c(rep(1,5),rep(0,5))
mean1
mean2
train_test <- function(n,kernel){}
train_test <- function(n,kernel){
train1 <- cbind(rep(0,50),mvrnorm(n=50,mu=mean1,Sigma=I10))
train2 <- cbind(rep(1,50),mvrnorm(n=50,mu=mean2,Sigma=I10))
train<- as.data.frame(rbind(train1,train2))
names(train)<-c("label","x1","x2","x3","x4","x5","x6","x7","x8","x9","x10")
train$label = as.factor(train$label)
svm.fit <-svm(label~., data=train,kernel=kernel,shrinking=TRUE)
test1 <- cbind(0,mvrnorm(n=n, mu=mean1, Sigma=I10))
test2<-cbind(1,mvrnorm(n=n, mu=mean2,Sigma=I10))
test <- as.data.frame(rbind(test1,test2))
names(test)<-c("label", "x1","x2","x3","x4","x5","x6","x7","x8","x9","x10")
test$label=as.factor(test$label)
pred.svm <- predict(svm.fit, test[,-1])
table(test[,1], pred.svm)
1-sum(test[,1]==pred.svm)/2000
}
set.seed(1)
N<-1000
test_mse = rep(0,N)
for (i in 1:N){
test_mse[i] <- train_test (1000,"radial")
}
mean(test_mse)
set.seed(1)
N
test_mse=rep(0,N)
for (i in 1:N){
test_mse[i] <- train_test(1000,"linear")
}
mean(test_mse)
train_test2 <- function(n){
train1<-cbind(rep(0,50),mvrnorm(n=50,mu=mean1,Sigma=I10))
train2<-cbind(rep(1,50),mvrnorm(n=50,mu=mean2,Sigma=I10))
train<-as.data.frame(rbind(train1,train2))
names(train)<-c("label","x1","x2","x3","x4","x5","x6","x7","x8","x9","x10")
train$label=as.factor(train$label)
lmfit <- glm(label~.,data=train,family=binomial)
test1=cbind(0,mvrnorm(n=n,mu=mean1,Sigma=I10))
test2=cbind(0,mvrnorm(n=n,mu=mean2,Sigma=I10))
test<-as.data.frame(rbind(test1,test2))
names(test)<-c("label","x1","x2","x3","x4","x5","x6","x7","x8","x9","x10")
test$label <- as.factor(test$label)
pred.lmfit <- predict(lmfit, test[,-1])
table(test[,1],pred.lmfit)
1-sum(test[,1] == pred.lmfit)/2000
}
set.seed(1)
N<-1000
test_mse = rep(0,N)
for(i in 1:N){}
for(i in 1:N){
test_mse[i] <- train_test2(1000)
}
mean(test_mse)
?prcomp
library(iris)
library("iris")
load("iris")
getwd()
?library
load(iris)
load(mtcars)
load('mtcars')
summary(mtcars)
?iris
dimnames(iris)
tapply(iris$Sepal.Length, iris$Species, mean)
medical.example <- data.frame(patient = 1:100, age=rnorm(100,mean=60,sd=12), treatment = gl(2,50,labels=c("treatment", "control")))
medical.example
gl(2,5,labels=c('a','c'))
gl(2,5)
player=sample(letters,25)
player
tapply(iris$Sepal.Width, iris$Species, max)
tapply(iris$Sepal.Length, iris$Species, max)
tapply(iris$Sepal.Length, iris$Species, mean)
tapply(iris$Sepal.Length, iris$Species, sd)
data = as.data.frame(seq(as.Date("1990-01-01"), as.Date("2013-12-31"), by="day)"))
data = as.data.frame(seq(as.Date("1990-01-01"), as.Date("2013-12-31"), by="day"))
names(data)="date"
summary(data)
head(data)
data$month = substring(data$date, 6,7)
head(data)
data$year = substring(data$date,1,4)
data$snow_lying = round(rnorm(dim(data)[1], mean=0.5, sd=0.1))
head(data)
tapply(data$snow_lying,data$month,sum)
tapply(data$snow_lying,list(data$month,data$year),sum)
tapply(data$snow_lying,c(data$month,data$year),sum)
list(1,2)
c(1,2)
Orange
tapply(Orange$circumference,Orange$Tree,max)
tapply(Orange$circumference,Orange$Tree,max, simplify=TRUE)
tapply(Orange$circumference,Orange$Tree,max, simplify=FALSE)
?Orange
?datasets
library(help="datasets")
summary(LakeHuron)
head(LakeHuron)
names(LakeHuron)
dim(LakeHuron)
dim(Orange)
class(LakeHuron)
?ts
length(LakeHuron)
1972-1875
plot(LakeHuron)
for(x in 1:5){print(x)}
I=rep(0,100)
I
I[8]
source('~/.active-rstudio-document')
I
plot(I)
source('~/.active-rstudio-document')
plot(I)
source('~/.active-rstudio-document')
plot(I)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
plot(I)
source('~/.active-rstudio-document')
plot(I)
source('~/pset7problem3.R')
y <- 4
getwd()
ls()
SPE470 <- read.csv('SPE470')
SPE470 <- read.csv('SPE470.csv')
class(SPE470)
summary(SPE470)
head(SPE470)
plot(SPE470[,2], SPE470[,3])
SPE470 <- read.csv('SPE470.csv')
plot(SPE470[,2], SPE470[,3])
R1 <- tapply(SPE470[,2],SPE470[,1],mean)
R1
class(R1)
R1_test <- as.list(R1)
R1_test
squares <- list(1,2)
squares
R1
R1_test
R1_test <- as.vector(R1)
R1_test
squares <- c(1250, 500, 2475, 833.333, 2000,625, 487.5,4968.75)
R1sheet <- R1_test/squares
R1sheet
10000*32/160
R2 <- as.list(tapply(SPE470[,3],SPE470[,1],mean))
R2
R2sheet <- R2/squares
R2 <- as.vector(R2)
R2sheet <- R2/squares
R2
R2 <- tapply(SPE470[,3],SPE470[,1],mean)
R2
class(R2)
R2_test <- as.list(R2)
R2_test
R2_test <- as.vector(R2_test)
R2_test
dim(R2_test)
dim(R1_test)
R1_test
R1
R1_test2 <- as.vector(R1)
R1_test2
R2_test2 <- as.vector(R2)
R2_test2
R2sheet <- R2_test2/squares
R2sheet
R1sheet
difference <- (R2sheet-R1sheet)/R1sheet
difference
plot(c(50,50,50,39,397.5,594,640,500), c(1.1,1.12,1.66,0.77,1.87,1.24,2.27,1.25))
plot(c(833.3,625,500, 487.5, 4968.75,2475,2000,1250), c(1.1,1.12,1.66,0.77,1.87,1.24,2.27,1.25))
plot(c(833.3,625,500, 487.5, 4968.75,2475,2000,1250), c(1.1,1.12,1.66,0.77,1.87,1.24,2.27,1.25), xlab='squares',ylab='percent change')
library(swirl)
rm(list=ls())
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package,country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package=="swirl")
filter(cran, r_version=="3.1.1", country=="US")
?Comparison
filter(cran, r_version<="3.0.2", country=="IN")
filter(cran, country=="IN"|country=="IN")
filter(cran, country=="US"|country=="IN")
filter(cran,size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
)
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size/2^20)
mutate(cran3, size_mb = size/2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size = size+1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
?dplyr
?select
?arrange
iris2 <- select(iris, 1:4)
iris2
iris2 <- select(iris, Sepal.Length, Petal.Length)
head(iris2)
arrange(iris2, desc(Petal.Length))
iris3 <- arrange(iris2, desc(Petal.Length))
plot(iris3$Sepal.Length)
?mutate
iris4 <- mutate(iris3, Petal.Inches = Petal.Length*2.2)
head(iris4)
iris5 <- transmute(iris4, Petal.Inch <- Petal.Inches/(2.2*2.2))
head(iris5)
?summary
summary(iris5, mean(Petal.Inches))
summary(iris5)
summary(iris5, mean)
ls()
file.exists("iris5")
?dir.remove
?download.file
head(iris,10)
head(iris, nrows=10)
head(iris, nrow=10)
?head
head(iris, n=10L)
head(iris, n=10)
library(xlsx)
source('~/.active-rstudio-document')
head(dat)
sum(dat$Zip*dat$Ext,na.rm=T)
library(XML)
install.packages("XML")
library(XML)
source('~/.active-rstudio-document')
?xmlTreeParse
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
zipcodes <- xpathSApply(xmlRoot(doc), "//zipcode", xmlValue)
zipcodes
dim(zipcodes)
length(zipcodes)
?sum
?count
test <- table(zipcodes)
test
?table
ls()
?nrows
?nrow
tapply(iris$Species,iris$Species,nrow)
tapply(iris$Species,iris$Species,NROW)
library(help="datasets")
?hist
?par
hist(iris$Sepal.Width)
hist(iris$Sepal.Width, breaks=20)
boxplot(Sepal.Width ~ Species, iris)
plot(iris$Sepal.Width, iris$Sepal.Length, pch='a')
plot(iris$Sepal.Width, iris$Sepal.Length, pch='*')
with(subset(iris,Species=="versicolor"), points(Sepal.Width,Sepal.Length,col="blue"))
with(subset(iris,Species=="versicolor"), points(Sepal.Width,Sepal.Length,col="blue", pch="*"))
with(subset(iris,Species=="versicolor"), points(Sepal.Width,Sepal.Length,col="blue", pch=19))
example(points)
?Devices
dev.cur()
dev.copy()
setwd("~/Coursera/datasciencecoursera/exdata/project1")
ls()
rm(list=ls())
ls()
?read.file
?read?
?read
?read.csv
library(sqldf)
install.packages("sqldf")
library(sqldf)
?read.table.sql
?read.csv.sql
all_household_data <- read.file("household_power_consumption.txt",header=TRUE, sep=";", na.strings="?")
all_household_data <- read.table("household_power_consumption.txt",header=TRUE, sep=";", na.strings="?")
household <- subset(all_household_data, Date == "01/02/2007"  Date=="02/02/2007")
household <- subset(all_household_data, Date == "01/02/2007", Date=="02/02/2007")
dim(household)
head(household)
head(all_household_data)
household <- subset(all_household_data, all_household_data$Date == "01/02/2007")
dim(household)
head(household)
household_data <- read.table("household_power_consumption.txt",header=TRUE, sep=";", na.strings="?",skip=66637, nrows=69518-66637)
dim(household_data)
69518-66637
head(household_data)
tail(household_data)
household_data <- read.table("household_power_consumption.txt",header=TRUE, sep=";", na.strings="?",skip=66637, nrows=2879)
tail(household_data)
head(household_data)
household_data <- read.table("household_power_consumption.txt",header=TRUE, sep=";", na.strings="?",skip=66636, nrows=2880)
head(household_data)
tail(household_data)
tqb5rows <- read.table("household_power_consumption.txt",header=TRUE, sep=';', na.strings="?", nrows=5)
classes <- sapply(tab5rows, class)
classes <- sapply(tqb5rows, class)
classes
?read.table
?Extract
household_data <- read.table("household_power_consumption.txt",header=TRUE, sep=";", na.strings="?",skip=66636, nrows=2880)
dim(household_data)
subset(household_data, Date=='02/02/2007')
subset(household_data, household_data$Date=='02/02/2007')
names(household_data)
first5rows <- read.table("household_power_consumption.txt", header=TRUE, sep=";", nrows=5, na.strings="?")
names(first5rows)
names <- names(first5rows)
names(household_data) <- names
names(household_data)
head(household_data)
tail(household_data)
household_data[1,]
household_data$Date
test <- subset(household_data, household_data$Date = 1/2/2007)
test <- subset(household_data, household_data$Date== 1/2/2007)
test
test <- subset(household_data, household_data$Date== '1/2/2007')
test
test <- subset(household_data, household_data$Date== '1/2/2007')
?subset
test <- subset(household_data, household_data$Date== '1/2/2007' || household_data$Date == '2/2/2007')
dim(test)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
dim(household_data)
hist(Global_active_power)
hist(household_data$Global_active_power)
hist(household_data$Global_active_power, xlab="Global Active Power (kilowatts")
hist(household_data$Global_active_power, xlab="Global Active Power (kilowatts)", col="red")
hist(household_data$Global_active_power, xlab="Global Active Power (kilowatts)", col="red", main="Global Active Power")
source('~/.active-rstudio-document')
?png
source('~/.active-rstudio-document')
plot(household_data$Time, household_data$Global_active_power)
?paste
paste(household_data$Date, household_data$Time, sep=" ")
test <- paste(household_data$Date, household_data$Time, sep=" ")
?as.Posixct
?as.POSIXct
test1 <- as.POSIXct(test)
head(test1)
test1 <- as.POSIXct(test, "%d/%m/%Y %H:%M:%S")
test1 <- as.POSIXlt(test, "%d/%m/%Y %H:%M:%S")
test2 <- strptime(test, "%d/%m/%Y %H:%M:%S")
dim(test2)
length(test2)
head(test2)
class(test2)
weekdays(test2)
plot(test2, household_data$Global_active_power)
plot(time, household_data$Global_active_power, xlab="", ylab="Global Active Power (kilowatts)")
plot(test2, household_data$Global_active_power, xlab="", ylab="Global Active Power (kilowatts)")
plot(test2, household_data$Global_active_power, xlab="", ylab="Global Active Power (kilowatts)", type="l")
source('~/.active-rstudio-document')
source('~/Coursera/datasciencecoursera/exdata/project1/plot2.R')
exists(time)
exist(time)
plot(time, household_data$Sub_metering_1, col="black", type="l")
plot(time, c(household_data$Sub_metering_1, household_data$Sub_metering_2))
plot(time, household_data$Sub_metering_1, household_data$Sub_metering_2)
plot(time, household_data$Sub_metering_1)
plot(time, household_data$Sub_metering_1, col="black", type="l")
plot(time, household_data$Sub_metering_2, col="blue", type="l")
plot(time, household_data$Submetering_1, type = "n")
plot(time, household_data$Sub_metering_1, col="black", type="l", type="n")
plot(time, household_data$Sub_metering_1, col="black", type="n")
lines(time, household_data$Sub_metering_1, col="black")
lines(time, household_data$Sub_metering_2, col="red")
lines(time, household_data$Sub_metering_3, col="blue")
legend("topright")
legend("topright", legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
legend("topright", legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=1)
legend("topright", legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=1, col=c("black", "red", "blue"))
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
par(mfrow=c(2,2))
plot(time, household_data$Global_active_power, xlab="", ylab="Global Active Power",type="l")
plot(time, household_data$Voltage, xlab="datetime", ylab="Voltage",type="l")
plot(time, household_data$Sub_metering_1, type="n", xlab="", ylab="Energy sub metering")
lines(time, household_data$Sub_metering_1, col="black")
lines(time, household_data$Sub_metering_2, col="red")
lines(time, household_data$Sub_metering_3, col="blue")
legend("topright", legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=1, col=c("black", "red", "blue"))
plot(time,household_data$Global_reactive_power,type="l", xlab="datetime")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/Coursera/datasciencecoursera/exdata/project1/plot3.R')
source('~/Coursera/datasciencecoursera/exdata/project1/plot2.R')
source('~/Coursera/datasciencecoursera/exdata/project1/plot1.R')
rm(list=ls())
ls()
